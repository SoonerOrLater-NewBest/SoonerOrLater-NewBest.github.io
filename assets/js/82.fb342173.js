(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{660:function(t,a,s){"use strict";s.r(a);var r=s(45),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-快速上手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-快速上手"}},[t._v("#")]),t._v(" "),s("Label",{attrs:{level:1}}),t._v(" Git 快速上手")],1),t._v(" "),s("h2",{attrs:{id:"一、安装-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、安装-git"}},[t._v("#")]),t._v(" 一、安装 Git")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网直接下载"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("git --version "),s("CopyBoard",{attrs:{text:"git --version"}}),t._v(" // 查看版本号")],1)]),t._v(" "),s("h2",{attrs:{id:"二、设置-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、设置-git"}},[t._v("#")]),t._v(" 二、设置 Git")]),t._v(" "),s("h3",{attrs:{id:"生成密钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成密钥"}},[t._v("#")]),t._v(" 生成密钥")]),t._v(" "),s("ul",[s("li",[t._v("查看是否已经有了 ssh 密钥：cd ~/.ssh")]),t._v(" "),s("li",[t._v("如果没有密钥则不会有此文件夹，有则备份删除。")]),t._v(" "),s("li",[t._v('ssh-keygen -t rsa -C "xxx@xxx.com"')])]),t._v(" "),s("h3",{attrs:{id:"上传密钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上传密钥"}},[t._v("#")]),t._v(" 上传密钥")]),t._v(" "),s("ul",[s("li",[t._v("以 github 为例，依次点击 Setting->SSH and GPB keys->New SSH Key，复制粘贴生成的.pub 文件中的秘钥")]),t._v(" "),s("li",[t._v("然后就可以用 ssh 协议，拉取推送代码了")])]),t._v(" "),s("h3",{attrs:{id:"设置全局基础配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置全局基础配置"}},[t._v("#")]),t._v(" 设置全局基础配置")]),t._v(" "),s("ul",[s("li",[t._v('git config --global user.name "xxx" // 请换成你自己的名字')]),t._v(" "),s("li",[t._v('git config --global user.email "xxx@xx.com" // 请换成你自己的邮箱')]),t._v(" "),s("li",[t._v("git config --global push.default simple "),s("CopyBoard",{attrs:{text:"git config --global push.default simple"}}),t._v(" // 要求 Git 版本 1.9.5 以上")],1),t._v(" "),s("li",[t._v("git config --global core.autocrlf false "),s("CopyBoard",{attrs:{text:"git config --global core.autocrlf false"}}),t._v(" // 让 Git 不要管 Windows/Unix 换行符转换的事")],1),t._v(" "),s("li",[t._v("git config --global core.ignorecase false "),s("CopyBoard",{attrs:{text:"git config --global core.ignorecase false"}}),t._v(" // windows 设置大小写敏感")],1)]),t._v(" "),s("h2",{attrs:{id:"三、基本工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、基本工作流程"}},[t._v("#")]),t._v(" 三、基本工作流程")]),t._v(" "),s("blockquote",[s("p",[t._v("先附上 "),s("RouterLink",{attrs:{to:"/technology-stack/tools/git-cheat-sheet.html"}},[t._v("Git 备忘清单")]),t._v("\n记着先 pull 再 push，冲突都在本地解决")],1)]),t._v(" "),s("h3",{attrs:{id:"开始一个工作区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开始一个工作区"}},[t._v("#")]),t._v(" 开始一个工作区")]),t._v(" "),s("ul",[s("li",[t._v("init 创建一个空的 Git 仓库或重新初始化一个已存在的仓库")]),t._v(" "),s("li",[t._v("clone 使用 SSH（推荐） 或 HTTP 协议，克隆仓库到一个新目录（推荐）")]),t._v(" "),s("li",[t._v("git config --global credential.helper store "),s("CopyBoard",{attrs:{text:"git config --global credential.helper store"}}),t._v(" // 记住 git 帐号密码(http 时避免每次提交都要输入)")],1)]),t._v(" "),s("h3",{attrs:{id:"在当前变更上工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在当前变更上工作"}},[t._v("#")]),t._v(" 在当前变更上工作")]),t._v(" "),s("ul",[s("li",[t._v("add 添加文件内容至索引")]),t._v(" "),s("li",[t._v("mv 移动或重命名一个文件、目录或符号链接")]),t._v(" "),s("li",[t._v("restore 恢复工作区文件")]),t._v(" "),s("li",[t._v("rm 从工作区和索引中删除文件")])]),t._v(" "),s("h3",{attrs:{id:"检查历史和状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查历史和状态"}},[t._v("#")]),t._v(" 检查历史和状态")]),t._v(" "),s("ul",[s("li",[t._v("bisect 通过二分查找定位引入 bug 的提交")]),t._v(" "),s("li",[t._v("diff 显示提交之间、提交和工作区之间等的差异")]),t._v(" "),s("li",[t._v("grep 输出和模式匹配的行")]),t._v(" "),s("li",[t._v("log 显示提交日志")]),t._v(" "),s("li",[t._v("show 显示各种类型的对象")]),t._v(" "),s("li",[t._v("status 显示工作区状态")])]),t._v(" "),s("h3",{attrs:{id:"扩展、标记和调校您的历史记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展、标记和调校您的历史记录"}},[t._v("#")]),t._v(" 扩展、标记和调校您的历史记录")]),t._v(" "),s("ul",[s("li",[t._v("branch 列出、创建或删除分支")]),t._v(" "),s("li",[t._v("commit 记录变更到仓库")]),t._v(" "),s("li",[t._v("merge 合并两个或更多开发历史")]),t._v(" "),s("li",[t._v("rebase 在另一个分支上重新应用提交")]),t._v(" "),s("li",[t._v("reset 重置当前 HEAD 到指定状态")]),t._v(" "),s("li",[t._v("switch 切换分支")]),t._v(" "),s("li",[t._v("tag 创建、列出、删除或校验一个 GPG 签名的标签对象")])]),t._v(" "),s("h3",{attrs:{id:"协同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协同"}},[t._v("#")]),t._v(" 协同")]),t._v(" "),s("ul",[s("li",[t._v("fetch 从另外一个仓库下载对象和引用")]),t._v(" "),s("li",[t._v("pull 获取并整合另外的仓库或一个本地分支")]),t._v(" "),s("li",[t._v("push 更新远程引用和相关的对象")])]),t._v(" "),s("h2",{attrs:{id:"四、git-工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、git-工具"}},[t._v("#")]),t._v(" 四、Git 工具")]),t._v(" "),s("h3",{attrs:{id:"桌面工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桌面工具"}},[t._v("#")]),t._v(" 桌面工具")]),t._v(" "),s("p",[s("strong",[t._v("Git 官方的图形化界面")])]),t._v(" "),s("ul",[s("li",[t._v("Git GUI （优势：commit 前代码改动的浏览和挑选）")])]),t._v(" "),s("ol",[s("li",[t._v("命令行敲 git gui "),s("CopyBoard",{attrs:{text:"git gui"}})],1),t._v(" "),s("li",[t._v("Windows Explorer，适当目录下，右键菜单，Git GUI Here")])]),t._v(" "),s("ul",[s("li",[t._v("Gitk （优势：显示版本树、历史信息）")])]),t._v(" "),s("ol",[s("li",[t._v("命令行敲 gitk --all & "),s("CopyBoard",{attrs:{text:"gitk --all &"}})],1),t._v(" "),s("li",[t._v("Git GUI -> 菜单 -> 版本库 -> 图示所有分支的历史")])]),t._v(" "),s("p",[s("strong",[t._v("其他备选")])]),t._v(" "),s("ul",[s("li",[t._v("TortoiseGit (Windows)")]),t._v(" "),s("li",[t._v("SourceTree (OS X 和 Windows)")])]),t._v(" "),s("h3",{attrs:{id:"git-flow-工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-工具"}},[t._v("#")]),t._v(" Git flow 工具")]),t._v(" "),s("h4",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("X")]),t._v("\nbrew install git"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("flow\n\nLinux\napt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" install git"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("flow\n\nWindows\nwget "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("check"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("certificate https"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("github"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nvie"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("gitflow"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("raw"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("develop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("contrib"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("gitflow"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("installer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" bash\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h2",{attrs:{id:"五、git-flow-工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、git-flow-工作流"}},[t._v("#")]),t._v(" 五、Git flow 工作流")]),t._v(" "),s("h3",{attrs:{id:"约定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#约定"}},[t._v("#")]),t._v(" 约定")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("分支名称")]),t._v(" "),s("th",[t._v("分支作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("master")]),t._v(" "),s("td",[t._v("稳定分支，用于生产环境，与线上版本同步")])]),t._v(" "),s("tr",[s("td",[t._v("develop")]),t._v(" "),s("td",[t._v("开发分支，用于测试环境，用于构建测试版本，来源于 master")])]),t._v(" "),s("tr",[s("td",[t._v("feature/xxx")]),t._v(" "),s("td",[t._v("功能分支，用于功能开发，来源于 dev，开发完成并自测通过后合并到 dev")])]),t._v(" "),s("tr",[s("td",[t._v("hotfix/xxx")]),t._v(" "),s("td",[t._v("修复分支，线上功能修复，来源于 master，修复后双向 merge 到 dev 和 master")])]),t._v(" "),s("tr",[s("td",[t._v("release/xxx")]),t._v(" "),s("td",[t._v("发布分支，版本发布使用，来源于 dev 测试后的稳定代码，不应再发功能开发，发布后，要双向 merge 到 dev 和 master")])])])]),t._v(" "),s("h3",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("初始化: git flow init")])]),t._v(" "),s("li",[s("p",[t._v("开始新 Feature: git flow feature start MYFEATURE")])]),t._v(" "),s("li",[s("p",[t._v("Publish 一个 Feature(也就是 push 到远程): git flow feature publish MYFEATURE")])]),t._v(" "),s("li",[s("p",[t._v("获取 Publish 的 Feature: git flow feature pull origin MYFEATURE")])]),t._v(" "),s("li",[s("p",[t._v("完成一个 Feature: git flow feature finish MYFEATURE")])]),t._v(" "),s("li",[s("p",[t._v("开始一个 Release: git flow release start RELEASE [BASE]")])]),t._v(" "),s("li",[s("p",[t._v("Publish 一个 Release: git flow release publish RELEASE")])]),t._v(" "),s("li",[s("p",[t._v("发布 Release: git flow release finish RELEASE")])]),t._v(" "),s("li",[s("p",[t._v("别忘了 git push --tags")])]),t._v(" "),s("li",[s("p",[t._v("开始一个 Hotfix: git flow hotfix start VERSION [BASENAME]")])]),t._v(" "),s("li",[s("p",[t._v("发布一个 Hotfix: git flow hotfix finish VERSION")])])]),t._v(" "),s("h2",{attrs:{id:"六、常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、常见问题"}},[t._v("#")]),t._v(" 六、常见问题")]),t._v(" "),s("h3",{attrs:{id:"_1、git-stash-暂存修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、git-stash-暂存修改"}},[t._v("#")]),t._v(" 1、Git stash 暂存修改")]),t._v(" "),s("p",[t._v("当我们在开发项目的时候，突然来一个变更需要修改，我们除了将当前项目提交（commit）后切换（checkout） 到其他分支外，我们还可以先将当前的修改暂存（stash）起来，然后再切换（checkout）到其他分支，而不需要提交（commit），这样就可以减少一个 commit （虽然可以使用 git commit --amend 来修改最后一次提交 ）")]),t._v(" "),s("p",[s("strong",[t._v("暂存修改")])]),t._v(" "),s("ul",[s("li",[t._v('git stash 或 git stash save "注释" 来暂存修改，已经被 git 跟踪，只是修改了代码（而不是新增）文件')]),t._v(" "),s("li",[t._v('如果有新添加的文件，那么就需要添加 -a 参数（如，git stash -a 或 git stash save -a "注释"），或先 git add . 然后再使用 git stash 或 git stash save "注释" 来暂存修改')])]),t._v(" "),s("p",[s("strong",[t._v("取出修改")])]),t._v(" "),s("ul",[s("li",[t._v("git stash pop 取出最近的一个暂存，并从 stash list 中删除该暂存记录")]),t._v(" "),s("li",[t._v("git stash apply stash@{id} 取出某个暂存记录，但不会删除记录，stash@{id}里面的 id 默认从 0 开始，最近的暂存为 0")])]),t._v(" "),s("p",[s("strong",[t._v("暂存列表")])]),t._v(" "),s("ul",[s("li",[t._v("git stash list 查看 stash 列表")]),t._v(" "),s("li",[t._v("git stash drop stash@{id} 删除某一个修改暂存")]),t._v(" "),s("li",[t._v("git stash clear 清空所有的修改暂存")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_2、查看-git-日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、查看-git-日志"}},[t._v("#")]),t._v(" 2、查看 Git 日志")]),t._v(" "),s("h4",{attrs:{id:"git-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" git log")]),t._v(" "),s("ul",[s("li",[t._v("显示所有提交过的版本信息")]),t._v(" "),s("li",[t._v("加上参数 --pretty=oneline，过滤显示版本号和提交时的备注信息")])]),t._v(" "),s("h4",{attrs:{id:"git-reflog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-reflog"}},[t._v("#")]),t._v(" git reflog")]),t._v(" "),s("ul",[s("li",[t._v("查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）")])]),t._v(" "),s("h4",{attrs:{id:"自由穿梭-git-版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自由穿梭-git-版本"}},[t._v("#")]),t._v(" 自由穿梭 Git 版本")]),t._v(" "),s("ul",[s("li",[t._v("git reset --hard HEAD~1 退回到上一个版本")]),t._v(" "),s("li",[t._v("通过 git reflog 找到被删除的 commitid")]),t._v(" "),s("li",[t._v("git reset --hard commitid 就可以回到指定版本")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_3、git-cherry-pick-挑拣提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、git-cherry-pick-挑拣提交"}},[t._v("#")]),t._v(" 3、git cherry-pick 挑拣提交")]),t._v(" "),s("p",[t._v("获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就可以使用 git cherry-pick")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("1、首先，切换到 develop 分支，敲 git log 命令，查找需要合并的 commit 记录，比如 commitID：7fcb3defff；")])]),t._v(" "),s("li",[s("p",[t._v("2、然后，切换到 master 分支，使用 git cherry-pick 7fcb3defff  命令，就把该条 commit 记录合并到了 master 分支，这只是在本地合并到了 master 分支；")])]),t._v(" "),s("li",[s("p",[t._v("3、最后，git push 提交到 master 远程，至此，就把 develop 分支的这条 commit 所涉及的更改合并到了 master 分支。")])])]),t._v(" "),s("h4",{attrs:{id:"常用-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用-options"}},[t._v("#")]),t._v(" 常用 options:")]),t._v(" "),s("ul",[s("li",[t._v("--continue 继续当前的 chery-pick 序列")]),t._v(" "),s("li",[t._v("--quit 退出当前的 chery-pick 序列")]),t._v(" "),s("li",[t._v("--abort 取消当前的 chery-pick 序列，恢复当前分支")]),t._v(" "),s("li",[t._v("-n, --no-commit 不自动提交")]),t._v(" "),s("li",[t._v("-e, --edit 编辑提交信息")])]),t._v(" "),s("h3",{attrs:{id:"_4、tag-和-branch-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、tag-和-branch-的区别"}},[t._v("#")]),t._v(" 4、tag 和 branch 的区别")]),t._v(" "),s("ul",[s("li",[t._v("tag 对应某次 commit, 是一个点，是不可移动的。")]),t._v(" "),s("li",[t._v("branch 对应一系列 commit，是很多点连成的一根线，有一个 HEAD 指针，是可以依靠 HEAD 指针移动的。")]),t._v(" "),s("li",[t._v("创建 tag 是基于本地分支的 commit，而且与分支的推送是两回事，就是说分支已经推送到远程了，但是你的 tag 并没有，如果把 tag 推送到远程分支上，需要另外执行 tag 的推送命令。")])]),t._v(" "),s("h3",{attrs:{id:"_5、如何切换链接-git-服务器的方式是-ssh-还是-http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、如何切换链接-git-服务器的方式是-ssh-还是-http"}},[t._v("#")]),t._v(" 5、如何切换链接 git 服务器的方式是 ssh 还是 http")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git remote "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("url origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("要修改的url"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_6、删除暂存区文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、删除暂存区文件"}},[t._v("#")]),t._v(" 6、删除暂存区文件")]),t._v(" "),s("blockquote",[s("p",[t._v("提交后就只能回退指针了，取消暂存用于我们还未提交，但是把错误的文件添加到暂存区的时候")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取消暂存")]),t._v("\ngit restore "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("staged "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除暂存，加上--cache同上，没有--cache会将工作区文件也删除")]),t._v("\ngit rm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("cache "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h2",{attrs:{id:"七、git-命令别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、git-命令别名"}},[t._v("#")]),t._v(" 七、Git 命令别名")]),t._v(" "),s("h3",{attrs:{id:"_1、使用别名简化命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用别名简化命令"}},[t._v("#")]),t._v(" 1、使用别名简化命令")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("co checkout\ngit config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ci commit\ngit config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("br branch\ngit config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st status\ngit config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lg "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\"")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h2",{attrs:{id:"系统学习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统学习"}},[t._v("#")]),t._v(" 系统学习")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("《 Pro Git 》"),s("OutboundLink")],1),t._v(" > "),s("a",{attrs:{href:"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/ch01.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《 Git Magic 》"),s("OutboundLink")],1),t._v(" > "),s("a",{attrs:{href:"https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《 GitHub 秘籍 》"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);